
======================================================================
EXAMPLE: Halt
======================================================================
--- Source Code ---
halt
----------------------------------------------------------------------
--- Generated IR Code ---
STOP
======================================================================

======================================================================
EXAMPLE: Simple Assignment
======================================================================
--- Source Code ---
glob { counter }
     proc {} func {} main { var {}
        counter = 0
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 0
v_counter_1 = t1
======================================================================

======================================================================
EXAMPLE: Arithmetic Expression
======================================================================
--- Source Code ---
glob { a b result }
     proc {} func {} main { var {}
        a = 10;
        b = 5;
        result = ((a mult 2) plus (b div 1))
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 10
v_a_1 = t1
t2 = 5
v_b_1 = t2
t3 = 2
t4 = v_a_1 * t3
t5 = 1
t6 = v_b_1 / t5
t7 = t4 + t6
v_result_1 = t7
======================================================================

======================================================================
EXAMPLE: If-Then Statement
======================================================================
--- Source Code ---
glob { x }
     proc {} func {} main { var {}
        x = 5;
        if (x > 0) {
            print "positive"
        }
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 5
v_x_1 = t1
t2 = 0
IF v_x_1 > t2 THEN L1
GOTO L2
REM L1
PRINT "positive"
REM L2
======================================================================

======================================================================
EXAMPLE: If-Then-Else Statement
======================================================================
--- Source Code ---
glob { x status }
     proc {} func {} main { var {}
        x = 0;
        if (x eq 0) {
            status = 1
        } else {
            status = 0
        }
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 0
v_x_1 = t1
t2 = 0
IF v_x_1 = t2 THEN L1
t3 = 0
v_status_1 = t3
GOTO L3
REM L1
t4 = 1
v_status_1 = t4
REM L3
======================================================================

======================================================================
EXAMPLE: While Loop
======================================================================
--- Source Code ---
glob { i }
     proc {} func {} main { var {}
        i = 5;
        while (i > 0) {
            print i;
            i = (i minus 1)
        }
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 5
v_i_1 = t1
REM L1
t2 = 0
IF v_i_1 > t2 THEN L2
REM L2
PRINT v_i_1
t3 = 1
t4 = v_i_1 - t3
v_i_1 = t4
GOTO L1
REM L3
======================================================================

======================================================================
EXAMPLE: Do-Until Loop
======================================================================
--- Source Code ---
glob { count }
     proc {} func {} main { var {}
        count = 0;
        do {
            count = (count plus 1);
            print count
        } until (count > 5)
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 0
v_count_1 = t1
REM L1
t2 = 1
t3 = v_count_1 + t2
v_count_1 = t3
PRINT v_count_1
t4 = 5
t5 = v_count_1 > t4
IF t5 = 0 THEN L1
======================================================================

======================================================================
EXAMPLE: Logical AND
======================================================================
--- Source Code ---
glob { a b flag }
     proc {} func {} main { var {}
         a = 1; b = 0; flag = 0;
         if ((a > 0) and (b > 0)) {
             flag = 1
         }
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 1
v_a_1 = t1
t2 = 0
v_b_1 = t2
t3 = 0
v_flag_1 = t3
t4 = 0
IF v_a_1 > t4 THEN L3
REM L3
t5 = 0
IF v_b_1 > t5 THEN L1
GOTO L2
REM L1
t6 = 1
v_flag_1 = t6
REM L2
======================================================================

======================================================================
EXAMPLE: Logical OR
======================================================================
--- Source Code ---
glob { valid error }
     proc {} func {} main { var {}
         valid = 0; error = 1;
         if ((valid eq 1) or (error eq 1)) {
             print "check needed"
         }
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 0
v_valid_1 = t1
t2 = 1
v_error_1 = t2
t3 = 1
IF v_valid_1 = t3 THEN L1
REM L3
t4 = 1
IF v_error_1 = t4 THEN L1
GOTO L2
REM L1
PRINT "check needed"
REM L2
======================================================================

======================================================================
EXAMPLE: Logical NOT
======================================================================
--- Source Code ---
glob { active }
     proc {} func {} main { var {}
         active = 0;
         if (not (active eq 1)) {
             print "inactive"
         }
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 0
v_active_1 = t1
t2 = 1
IF v_active_1 = t2 THEN L2
GOTO L2
REM L1
PRINT "inactive"
REM L2
======================================================================

======================================================================
EXAMPLE: Procedure Call
======================================================================
--- Source Code ---
glob { g }
     proc {
         pdef setg(val) { local {} g = val }
     }
     func {}
     main { var { localval }
         localval = 42;
         setg(localval)
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 42
v_localval_1 = t1
t2 = CALL v_setg_1(v_localval_1)
======================================================================

======================================================================
EXAMPLE: Function Call
======================================================================
--- Source Code ---
glob { result input }
     proc {}
     func {
         fdef square(n) { local { sq }
             sq = (n mult n);
             halt; // Need one instruction before return
             return sq
         }
     }
     main { var {}
         input = 7;
         result = square(input)
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 7
v_input_1 = t1
t2 = CALL v_square_1(v_input_1)
v_result_1 = t2
======================================================================

======================================================================
EXAMPLE: Complex Example
======================================================================
--- Source Code ---
glob { i sum }
     proc {}
     func {}
     main { var {}
         sum = 0;
         i = 1;
         while (i > 6) {   // Equivalent to while i < 6, using > for test
             sum = (sum plus i);
             if (sum > 10) {
                 print "sum exceeded 10";
                 halt // Use halt instead of break
             } else {
                 print "sum is ok"
             };
             i = (i plus 1)
         };
         print "final sum";
         print sum
     }
----------------------------------------------------------------------
--- Generated IR Code ---
t1 = 0
v_sum_1 = t1
t2 = 1
v_i_1 = t2
REM L1
t3 = 6
IF v_i_1 > t3 THEN L2
REM L2
t4 = v_sum_1 + v_i_1
v_sum_1 = t4
t5 = 10
IF v_sum_1 > t5 THEN L4
PRINT "sum is ok"
GOTO L6
REM L4
PRINT "sum exceeded 10"
STOP
REM L6
t6 = 1
t7 = v_i_1 + t6
v_i_1 = t7
GOTO L1
REM L3
PRINT "final sum"
PRINT v_sum_1
======================================================================
